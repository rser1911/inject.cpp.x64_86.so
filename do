#!/bin/bash

LIB="lib.so"
export INCLUDE="lib.h"
export TAGS="tags"
rm -f $TAGS
ctags --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ lib.h

#DO_GEN=0
DO_GEN=1
if [ -n "$1" ]; then
    DO_GEN=1
fi


fname () {
    FUNCTION_NAME="$1"
    DESC="$(cat $TAGS | grep "^$FUNCTION_NAME"$'\t' | grep -v $'\t'"class:" | head -n 1 | sed 's|^.*\/\^(.*)\$.*$|\1|p' -rn)"
    if [ -z "$DESC" ]; then
    DESC="$FUNCTION_NAME();"
    fi

    echo "HOOK($FUNCTION_NAME, \"$DESC\");"
}

vtable(){
    CLASS_NAME="$1"
    FUNCTION_NAME="$(cat $TAGS | grep -v "^$CLASS_NAME::" | grep "class:$CLASS_NAME"$'\t' | grep virtual | grep access:public | head -n 1 | cut -f 1 )"
    FUNCTION_ARGS="$(cat $TAGS | grep -v "^$CLASS_NAME::" | grep "class:$CLASS_NAME"$'\t' | grep virtual | grep access:public | head -n 1 | grep -o $'\t'"signature:.*$" | cut -b12-)"
    #echo $FUNCTION_NAME $FUNCTION_ARGS && exit

    # now you will learn how to make clang to generate vtable
    echo 'int main(){ void (CLASS_NAME :: * p) FUNCTION_ARGS  = (void (CLASS_NAME :: *) FUNCTION_ARGS ) & CLASS_NAME :: FUNCTION_NAME; }' | \
    clang-8 -x c++ - -shared  -Xclang -fdump-vtable-layouts -O0 \
    -DCLASS_NAME="$CLASS_NAME" \
    -DFUNCTION_NAME="$FUNCTION_NAME" \
    -DFUNCTION_ARGS="$FUNCTION_ARGS" \
    -include "$INCLUDE" \
    | sed '/^VTable indices /,/^};/p' -nr > vtable.tmp
    rm a.out

    echo -e "static const char * ${CLASS_NAME}_name = \"$CLASS_NAME\";\n"
    echo "static const char * ${CLASS_NAME}_calls_desc[] = { "
    echo "static const char * ${CLASS_NAME}_calls_names[] = { " > vtable.names
    echo "enum __i_${CLASS_NAME} { " > vtable.enum

    I=0
    D=0
    N=$(cat vtable.tmp | grep "^ " | wc -l)

    cat vtable.tmp | grep "^ " | sed 's/^[^|]*| //' | while read l; do
        name="$(echo $l | sed -rn "s/^.*::([^(]*).*$/\1/p")"
        echo "    \"$name\"," >> vtable.names
        echo "    \"$l\","
        
        if [ "$name" == "~$CLASS_NAME" ]; then
            echo "    DESTRUCTOR$D," >> vtable.enum
            D=$(($D+1))
        else
            echo "    $name$I," >> vtable.enum
        fi
        I=$(($I+1))
    done

    echo -e "};\n"
    echo -e "};\n" >> vtable.names
    echo -e "};\n" >> vtable.enum

    cat vtable.names
    echo -e "static struct obj_desc ${CLASS_NAME}_desc (${CLASS_NAME}_name, ${CLASS_NAME}_calls_names, ${CLASS_NAME}_calls_desc, $N);\n"
    cat vtable.enum

    rm vtable.names
    rm vtable.enum
    rm vtable.tmp
}

LOADONFLY=1

g++ -g lib.cpp --shared -fPIC -o lib.so || exit

if [ $LOADONFLY -eq 1 ]; then
    g++ -g main.cpp -ldl -DLOADONFLY -o test || exit 
else
    g++ -g main.cpp -l:lib.so -L. -Wl,-rpath=. -o test || exit 
fi

if [ $DO_GEN -eq 1 ]; then
    echo "/* THIS FILE IS AUTOGENERATED */" > inject.h
    echo >> inject.h
    nm -D $LIB | grep ' T ' | cut -f3- -d' ' | grep -vE '^_' | while read l; do
        fname "$l" >> inject.h
    done
    echo >> inject.h
    cat classes | while read l; do
        [ -z "$l" ] && continue
        vtable "$l" >> inject.h
    done
fi

g++ -g -fPIC -shared inject.c -o inject.so -ldl || exit

echo -e "\n   [ NORMAL RUN ]\n"
./test
echo -e "\n   [ LD_PRELOAD inject.so RUN ]\n"

if [ $LOADONFLY -eq 1 ]; then
    [ ! -d "test.tmp" ] && mkdir test.tmp
    cd test.tmp
    [ ! -f "lib.so" ] && ln -s ../inject.so lib.so
    LD_PRELOAD=../inject.so:../lib.so ../test
    cd ..
else
    LD_PRELOAD=./inject.so ./test
fi
echo
